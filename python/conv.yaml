!obj:pylearn2.train.Train {
    dataset: &train !pkl: "preprocessed_labeled_training_for_pylearn2_fold_0.pkl",
    model: !obj:pylearn2.models.mlp.MLP {
        batch_size: %(batch_size)i,
        input_space: !obj:pylearn2.space.Conv2DSpace {
            shape: [32, 32],
            num_channels: 1
        },
        layers: [ !obj:pylearn2.models.mlp.ConvRectifiedLinear {
                 layer_name: 'conv1',
                 output_channels: 32,
                 irange: 0.05,
                 kernel_shape: [3, 3],
                 pool_shape: [2, 2],
                 pool_stride: [2, 2],
                 max_kernel_norm: 1.9365
             }, !obj:pylearn2.models.mlp.ConvRectifiedLinear {
                 layer_name: 'conv2',
                 output_channels: 64,
                 irange: 0.05,
                 kernel_shape: [3, 3],
                 pool_shape: [2, 2],
                 pool_stride: [2, 2],
                 max_kernel_norm: 1.9365
             }, !obj:pylearn2.models.mlp.RectifiedLinear {
                 layer_name: 'h1',
                 dim: 512,
                 irange: 1.,
                 # Rather than using weight decay, we constrain the norms of the weight vectors
                 max_col_norm: 1.
             }, !obj:pylearn2.models.mlp.RectifiedLinear {
                 layer_name: 'h2',
                 dim: 1024,
                 irange: 1.,
                 max_col_norm: 1.
             }, !obj:pylearn2.models.mlp.Softmax {
                 max_col_norm: 1.9365,
                 layer_name: 'y',
                 n_classes: 7,
                 istdev: .05
            }
        ],
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: %(batch_size)i,
        train_iteration_mode: 'even_shuffled_sequential',
        monitor_iteration_mode: 'even_sequential',
        learning_rate: 1,
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
            init_momentum: .5
        },
        monitoring_dataset:
        {
            'train' : *train,
            'valid' : !pkl: "preprocessed_labeled_validation_for_pylearn2_fold_0.pkl",
        },
        cost: !obj:pylearn2.costs.mlp.dropout.Dropout {
            input_include_probs: { 
                'conv1' : .8,
                'conv2' : 0.75,
                'h1' : .5,
                'h2' : .5,
                'y' : 1. 
            },
            input_scales: {
                'conv1' : 1.25,
                'conv2' : 1.33,
                'h1' : 2.,
                'h2' : 2.,
                'y' : 1.
            },
        },
        termination_criterion: !obj:pylearn2.termination_criteria.And {
            criteria: [
                !obj:pylearn2.termination_criteria.EpochCounter {
                    max_epochs: %(max_epochs)i
                },
                !obj:pylearn2.termination_criteria.MonitorBased {
                    channel_name: "valid_y_misclass",
                    prop_decrease: 0.,
                    N: 100
                }
            ]
        },
    },
    extensions: [
        !obj:pylearn2.training_algorithms.learning_rule.MomentumAdjustor {
            start: 1,
            saturate: 500,
            final_momentum: 0.99
        },
        !obj:pylearn2.training_algorithms.sgd.LinearDecayOverEpoch {
            start: 1,
            saturate: 868,
            decay_factor: 0.020379
        }
    ],
}


